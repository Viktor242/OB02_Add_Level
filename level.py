#Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и
# могут добавлять или удалять пользователя из системы.
#Требования:
from os import access


#1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе:
# ID, имя и уровень доступа ('user' для обычных сотрудников).

#2.Класс `Admin`: Этот класс должен наследоваться от класса `User`.
# Добавь дополнительный атрибут уровня доступа, специфичный для администраторов ('admin').
# Класс должен также содержать методы `add_user` и `remove_user`, которые позволяют
# добавлять и удалять пользователей из списка (представь, что это просто список экземпляров `User`).

#3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа
# и модификации снаружи. Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).

# Создание класса User
class User:
    def __init__(self, id, name, access_level: str = 'user'):
        self.__id = id  # Приватный атрибут
        self.__name = name  # Приватный атрибут
        self.__access_level = access_level  # Приватный атрибут

# Метод для получения идентификатора
    def get_id(self):
        return self.__id

# Метод для получения имени
    def get_name(self):
        return self.__name

# Метод для получения уровня доступа
    def get_access_level(self):
        return self.__access_level

# Метод для изменения имени
    def set_name(self, name):
        self.__name = name  # Метод для изменения имени

# Наследуемся от класса User класс Admin
class Admin(User):
    def __init__(self, id, name):
        super().__init__(id, name, access_level='admin')
        self.__users = []  # Приватный список пользователей

# Метод для добавления пользователей
    def add_user(self, user):
        self.__users.append(user)

# Метод для удаления пользователей
    def remove_user(self, user):
        self.__users.remove(user)

    def get_users(self):
        return self.__users

# Создаем обычных пользователей
user1 = User(1, "Иван Иванов")
user2 = User(2, "Петр Петров")
user3 = User(3, "Виктор Каменев")

# Создаем администратора
admin = Admin(100, "Администратор Системы")

# Администратор добавляет пользователей
admin.add_user(user1)
admin.add_user(user2)
admin.add_user(user3)

# Администратор удаляет пользователей
admin.remove_user(user1)

# Меняем имя администратора
admin.set_name("Чебурашка")

# Проверяем список пользователей
print(f"Админ {admin.get_name()} управляет пользователями:")
for user in admin.get_users():
    print(f"- {user.get_name()} (ID: {user.get_id()}), доступ: {user.get_access_level()}")





